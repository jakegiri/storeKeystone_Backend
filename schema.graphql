# This file is automatically generated by Keystone, do not modify it manually.
# Modify your Keystone config when you want to change this.

input CreateInitialUserInput {
  email: String
  password: String
  name: String
}

type Mutation {
  createInitialUser(
    data: CreateInitialUserInput!
  ): UserAuthenticationWithPasswordSuccess!
  authenticateUserWithPassword(
    email: String!
    password: String!
  ): UserAuthenticationWithPasswordResult!
  createRole(data: RoleCreateInput!): Role
  createRoles(data: [RoleCreateInput!]!): [Role]
  updateRole(where: RoleWhereUniqueInput!, data: RoleUpdateInput!): Role
  updateRoles(data: [RoleUpdateArgs!]!): [Role]
  deleteRole(where: RoleWhereUniqueInput!): Role
  deleteRoles(where: [RoleWhereUniqueInput!]!): [Role]
  createUser(data: UserCreateInput!): User
  createUsers(data: [UserCreateInput!]!): [User]
  updateUser(where: UserWhereUniqueInput!, data: UserUpdateInput!): User
  updateUsers(data: [UserUpdateArgs!]!): [User]
  deleteUser(where: UserWhereUniqueInput!): User
  deleteUsers(where: [UserWhereUniqueInput!]!): [User]
  createAddress(data: AddressCreateInput!): Address
  createAddresses(data: [AddressCreateInput!]!): [Address]
  updateAddress(
    where: AddressWhereUniqueInput!
    data: AddressUpdateInput!
  ): Address
  updateAddresses(data: [AddressUpdateArgs!]!): [Address]
  deleteAddress(where: AddressWhereUniqueInput!): Address
  deleteAddresses(where: [AddressWhereUniqueInput!]!): [Address]
  createProduct(data: ProductCreateInput!): Product
  createProducts(data: [ProductCreateInput!]!): [Product]
  updateProduct(
    where: ProductWhereUniqueInput!
    data: ProductUpdateInput!
  ): Product
  updateProducts(data: [ProductUpdateArgs!]!): [Product]
  deleteProduct(where: ProductWhereUniqueInput!): Product
  deleteProducts(where: [ProductWhereUniqueInput!]!): [Product]
  createProductCatagory(data: ProductCatagoryCreateInput!): ProductCatagory
  createProductCatagories(
    data: [ProductCatagoryCreateInput!]!
  ): [ProductCatagory]
  updateProductCatagory(
    where: ProductCatagoryWhereUniqueInput!
    data: ProductCatagoryUpdateInput!
  ): ProductCatagory
  updateProductCatagories(
    data: [ProductCatagoryUpdateArgs!]!
  ): [ProductCatagory]
  deleteProductCatagory(
    where: ProductCatagoryWhereUniqueInput!
  ): ProductCatagory
  deleteProductCatagories(
    where: [ProductCatagoryWhereUniqueInput!]!
  ): [ProductCatagory]
  createProductInventory(data: ProductInventoryCreateInput!): ProductInventory
  createProductInventories(
    data: [ProductInventoryCreateInput!]!
  ): [ProductInventory]
  updateProductInventory(
    where: ProductInventoryWhereUniqueInput!
    data: ProductInventoryUpdateInput!
  ): ProductInventory
  updateProductInventories(
    data: [ProductInventoryUpdateArgs!]!
  ): [ProductInventory]
  deleteProductInventory(
    where: ProductInventoryWhereUniqueInput!
  ): ProductInventory
  deleteProductInventories(
    where: [ProductInventoryWhereUniqueInput!]!
  ): [ProductInventory]
  createProductDiscount(data: ProductDiscountCreateInput!): ProductDiscount
  createProductDiscounts(
    data: [ProductDiscountCreateInput!]!
  ): [ProductDiscount]
  updateProductDiscount(
    where: ProductDiscountWhereUniqueInput!
    data: ProductDiscountUpdateInput!
  ): ProductDiscount
  updateProductDiscounts(data: [ProductDiscountUpdateArgs!]!): [ProductDiscount]
  deleteProductDiscount(
    where: ProductDiscountWhereUniqueInput!
  ): ProductDiscount
  deleteProductDiscounts(
    where: [ProductDiscountWhereUniqueInput!]!
  ): [ProductDiscount]
  endSession: Boolean!
}

union AuthenticatedItem = User

union UserAuthenticationWithPasswordResult =
    UserAuthenticationWithPasswordSuccess
  | UserAuthenticationWithPasswordFailure

type UserAuthenticationWithPasswordSuccess {
  sessionToken: String!
  item: User!
}

type UserAuthenticationWithPasswordFailure {
  code: PasswordAuthErrorCode!
  message: String!
}

enum PasswordAuthErrorCode {
  FAILURE
  IDENTITY_NOT_FOUND
  SECRET_NOT_SET
  MULTIPLE_IDENTITY_MATCHES
  SECRET_MISMATCH
}

type Role {
  id: ID!
  name: String
  canQueryUsers: Boolean
  canCRUDUsers: Boolean
  canDeleteUsers: Boolean
  canQueryProducts: Boolean
  canCRUDProducts: Boolean
  canDeleteProducts: Boolean
  canQueryCart: Boolean
  canCRUDCart: Boolean
  canDeleteCart: Boolean
  canQueryOrders: Boolean
  canCRUDOrders: Boolean
  canCRUDRoles: Boolean
  user(
    where: UserWhereInput! = {}
    orderBy: [UserOrderByInput!]! = []
    take: Int
    skip: Int! = 0
  ): [User!]
  userCount(where: UserWhereInput! = {}): Int
}

input RoleWhereUniqueInput {
  id: ID
}

input RoleWhereInput {
  AND: [RoleWhereInput!]
  OR: [RoleWhereInput!]
  NOT: [RoleWhereInput!]
  id: IDFilter
}

input IDFilter {
  equals: ID
  in: [ID!]
  notIn: [ID!]
  lt: ID
  lte: ID
  gt: ID
  gte: ID
  not: IDFilter
}

input RoleOrderByInput {
  id: OrderDirection
}

enum OrderDirection {
  asc
  desc
}

input RoleUpdateInput {
  name: String
  canQueryUsers: Boolean
  canCRUDUsers: Boolean
  canDeleteUsers: Boolean
  canQueryProducts: Boolean
  canCRUDProducts: Boolean
  canDeleteProducts: Boolean
  canQueryCart: Boolean
  canCRUDCart: Boolean
  canDeleteCart: Boolean
  canQueryOrders: Boolean
  canCRUDOrders: Boolean
  canCRUDRoles: Boolean
  user: UserRelateToManyForUpdateInput
}

input UserRelateToManyForUpdateInput {
  disconnect: [UserWhereUniqueInput!]
  set: [UserWhereUniqueInput!]
  create: [UserCreateInput!]
  connect: [UserWhereUniqueInput!]
}

input RoleUpdateArgs {
  where: RoleWhereUniqueInput!
  data: RoleUpdateInput!
}

input RoleCreateInput {
  name: String
  canQueryUsers: Boolean
  canCRUDUsers: Boolean
  canDeleteUsers: Boolean
  canQueryProducts: Boolean
  canCRUDProducts: Boolean
  canDeleteProducts: Boolean
  canQueryCart: Boolean
  canCRUDCart: Boolean
  canDeleteCart: Boolean
  canQueryOrders: Boolean
  canCRUDOrders: Boolean
  canCRUDRoles: Boolean
  user: UserRelateToManyForCreateInput
}

input UserRelateToManyForCreateInput {
  create: [UserCreateInput!]
  connect: [UserWhereUniqueInput!]
}

type User {
  id: ID!
  email: String
  password: PasswordState
  name: String
  address: Address
  role: Role
  createdAt: String
  modifiedAt: String
}

type PasswordState {
  isSet: Boolean!
}

input UserWhereUniqueInput {
  id: ID
  email: String
}

input UserWhereInput {
  AND: [UserWhereInput!]
  OR: [UserWhereInput!]
  NOT: [UserWhereInput!]
  id: IDFilter
  email: StringNullableFilter
}

input StringNullableFilter {
  equals: String
  in: [String!]
  notIn: [String!]
  lt: String
  lte: String
  gt: String
  gte: String
  contains: String
  startsWith: String
  endsWith: String
  mode: QueryMode
  not: NestedStringNullableFilter
}

enum QueryMode {
  default
  insensitive
}

input NestedStringNullableFilter {
  equals: String
  in: [String!]
  notIn: [String!]
  lt: String
  lte: String
  gt: String
  gte: String
  contains: String
  startsWith: String
  endsWith: String
  not: NestedStringNullableFilter
}

input UserOrderByInput {
  id: OrderDirection
}

input UserUpdateInput {
  email: String
  password: String
  name: String
  address: AddressRelateToOneForUpdateInput
  role: RoleRelateToOneForUpdateInput
  createdAt: String
  modifiedAt: String
}

input AddressRelateToOneForUpdateInput {
  create: AddressCreateInput
  connect: AddressWhereUniqueInput
  disconnect: Boolean
}

input RoleRelateToOneForUpdateInput {
  create: RoleCreateInput
  connect: RoleWhereUniqueInput
  disconnect: Boolean
}

input UserUpdateArgs {
  where: UserWhereUniqueInput!
  data: UserUpdateInput!
}

input UserCreateInput {
  email: String
  password: String
  name: String
  address: AddressRelateToOneForCreateInput
  role: RoleRelateToOneForCreateInput
  createdAt: String
  modifiedAt: String
}

input AddressRelateToOneForCreateInput {
  create: AddressCreateInput
  connect: AddressWhereUniqueInput
}

input RoleRelateToOneForCreateInput {
  create: RoleCreateInput
  connect: RoleWhereUniqueInput
}

type Address {
  id: ID!
  address: String
  mobileNumber: String
  pincode: String
  city: String
  state: String
  user: User
}

input AddressWhereUniqueInput {
  id: ID
}

input AddressWhereInput {
  AND: [AddressWhereInput!]
  OR: [AddressWhereInput!]
  NOT: [AddressWhereInput!]
  id: IDFilter
}

input AddressOrderByInput {
  id: OrderDirection
}

input AddressUpdateInput {
  address: String
  mobileNumber: String
  pincode: String
  city: String
  state: String
  user: UserRelateToOneForUpdateInput
}

input UserRelateToOneForUpdateInput {
  create: UserCreateInput
  connect: UserWhereUniqueInput
  disconnect: Boolean
}

input AddressUpdateArgs {
  where: AddressWhereUniqueInput!
  data: AddressUpdateInput!
}

input AddressCreateInput {
  address: String
  mobileNumber: String
  pincode: String
  city: String
  state: String
  user: UserRelateToOneForCreateInput
}

input UserRelateToOneForCreateInput {
  create: UserCreateInput
  connect: UserWhereUniqueInput
}

type Product {
  id: ID!
  name: String
  description: String
  price: String
  catagory(
    where: ProductCatagoryWhereInput! = {}
    orderBy: [ProductCatagoryOrderByInput!]! = []
    take: Int
    skip: Int! = 0
  ): [ProductCatagory!]
  catagoryCount(where: ProductCatagoryWhereInput! = {}): Int
  inventory: ProductInventory
  discount: ProductDiscount
  createdAt: String
  modifiedAt: String
  deletedAt: String
}

input ProductWhereUniqueInput {
  id: ID
}

input ProductWhereInput {
  AND: [ProductWhereInput!]
  OR: [ProductWhereInput!]
  NOT: [ProductWhereInput!]
  id: IDFilter
}

input ProductOrderByInput {
  id: OrderDirection
}

input ProductUpdateInput {
  name: String
  description: String
  price: String
  catagory: ProductCatagoryRelateToManyForUpdateInput
  inventory: ProductInventoryRelateToOneForUpdateInput
  discount: ProductDiscountRelateToOneForUpdateInput
  createdAt: String
  modifiedAt: String
  deletedAt: String
}

input ProductCatagoryRelateToManyForUpdateInput {
  disconnect: [ProductCatagoryWhereUniqueInput!]
  set: [ProductCatagoryWhereUniqueInput!]
  create: [ProductCatagoryCreateInput!]
  connect: [ProductCatagoryWhereUniqueInput!]
}

input ProductInventoryRelateToOneForUpdateInput {
  create: ProductInventoryCreateInput
  connect: ProductInventoryWhereUniqueInput
  disconnect: Boolean
}

input ProductDiscountRelateToOneForUpdateInput {
  create: ProductDiscountCreateInput
  connect: ProductDiscountWhereUniqueInput
  disconnect: Boolean
}

input ProductUpdateArgs {
  where: ProductWhereUniqueInput!
  data: ProductUpdateInput!
}

input ProductCreateInput {
  name: String
  description: String
  price: String
  catagory: ProductCatagoryRelateToManyForCreateInput
  inventory: ProductInventoryRelateToOneForCreateInput
  discount: ProductDiscountRelateToOneForCreateInput
  createdAt: String
  modifiedAt: String
  deletedAt: String
}

input ProductCatagoryRelateToManyForCreateInput {
  create: [ProductCatagoryCreateInput!]
  connect: [ProductCatagoryWhereUniqueInput!]
}

input ProductInventoryRelateToOneForCreateInput {
  create: ProductInventoryCreateInput
  connect: ProductInventoryWhereUniqueInput
}

input ProductDiscountRelateToOneForCreateInput {
  create: ProductDiscountCreateInput
  connect: ProductDiscountWhereUniqueInput
}

type ProductCatagory {
  id: ID!
  name: String
  description: String
  product(
    where: ProductWhereInput! = {}
    orderBy: [ProductOrderByInput!]! = []
    take: Int
    skip: Int! = 0
  ): [Product!]
  productCount(where: ProductWhereInput! = {}): Int
  createdAt: String
  modifiedAt: String
  deletedAt: String
}

input ProductCatagoryWhereUniqueInput {
  id: ID
}

input ProductCatagoryWhereInput {
  AND: [ProductCatagoryWhereInput!]
  OR: [ProductCatagoryWhereInput!]
  NOT: [ProductCatagoryWhereInput!]
  id: IDFilter
}

input ProductCatagoryOrderByInput {
  id: OrderDirection
}

input ProductCatagoryUpdateInput {
  name: String
  description: String
  product: ProductRelateToManyForUpdateInput
  createdAt: String
  modifiedAt: String
  deletedAt: String
}

input ProductRelateToManyForUpdateInput {
  disconnect: [ProductWhereUniqueInput!]
  set: [ProductWhereUniqueInput!]
  create: [ProductCreateInput!]
  connect: [ProductWhereUniqueInput!]
}

input ProductCatagoryUpdateArgs {
  where: ProductCatagoryWhereUniqueInput!
  data: ProductCatagoryUpdateInput!
}

input ProductCatagoryCreateInput {
  name: String
  description: String
  product: ProductRelateToManyForCreateInput
  createdAt: String
  modifiedAt: String
  deletedAt: String
}

input ProductRelateToManyForCreateInput {
  create: [ProductCreateInput!]
  connect: [ProductWhereUniqueInput!]
}

type ProductInventory {
  id: ID!
  quantity: String
  product: Product
  createdAt: String
  modifiedAt: String
  deletedAt: String
}

input ProductInventoryWhereUniqueInput {
  id: ID
}

input ProductInventoryWhereInput {
  AND: [ProductInventoryWhereInput!]
  OR: [ProductInventoryWhereInput!]
  NOT: [ProductInventoryWhereInput!]
  id: IDFilter
}

input ProductInventoryOrderByInput {
  id: OrderDirection
}

input ProductInventoryUpdateInput {
  quantity: String
  product: ProductRelateToOneForUpdateInput
  createdAt: String
  modifiedAt: String
  deletedAt: String
}

input ProductRelateToOneForUpdateInput {
  create: ProductCreateInput
  connect: ProductWhereUniqueInput
  disconnect: Boolean
}

input ProductInventoryUpdateArgs {
  where: ProductInventoryWhereUniqueInput!
  data: ProductInventoryUpdateInput!
}

input ProductInventoryCreateInput {
  quantity: String
  product: ProductRelateToOneForCreateInput
  createdAt: String
  modifiedAt: String
  deletedAt: String
}

input ProductRelateToOneForCreateInput {
  create: ProductCreateInput
  connect: ProductWhereUniqueInput
}

type ProductDiscount {
  id: ID!
  name: String
  description: String
  discountPercent: String
  active: Boolean
  product(
    where: ProductWhereInput! = {}
    orderBy: [ProductOrderByInput!]! = []
    take: Int
    skip: Int! = 0
  ): [Product!]
  productCount(where: ProductWhereInput! = {}): Int
  createdAt: String
  modifiedAt: String
  deletedAt: String
}

input ProductDiscountWhereUniqueInput {
  id: ID
}

input ProductDiscountWhereInput {
  AND: [ProductDiscountWhereInput!]
  OR: [ProductDiscountWhereInput!]
  NOT: [ProductDiscountWhereInput!]
  id: IDFilter
}

input ProductDiscountOrderByInput {
  id: OrderDirection
}

input ProductDiscountUpdateInput {
  name: String
  description: String
  discountPercent: String
  active: Boolean
  product: ProductRelateToManyForUpdateInput
  createdAt: String
  modifiedAt: String
  deletedAt: String
}

input ProductDiscountUpdateArgs {
  where: ProductDiscountWhereUniqueInput!
  data: ProductDiscountUpdateInput!
}

input ProductDiscountCreateInput {
  name: String
  description: String
  discountPercent: String
  active: Boolean
  product: ProductRelateToManyForCreateInput
  createdAt: String
  modifiedAt: String
  deletedAt: String
}

"""
The `JSON` scalar type represents JSON values as specified by [ECMA-404](http://www.ecma-international.org/publications/files/ECMA-ST/ECMA-404.pdf).
"""
scalar JSON
  @specifiedBy(
    url: "http://www.ecma-international.org/publications/files/ECMA-ST/ECMA-404.pdf"
  )

type Query {
  authenticatedItem: AuthenticatedItem
  roles(
    where: RoleWhereInput! = {}
    orderBy: [RoleOrderByInput!]! = []
    take: Int
    skip: Int! = 0
  ): [Role!]
  role(where: RoleWhereUniqueInput!): Role
  rolesCount(where: RoleWhereInput! = {}): Int
  users(
    where: UserWhereInput! = {}
    orderBy: [UserOrderByInput!]! = []
    take: Int
    skip: Int! = 0
  ): [User!]
  user(where: UserWhereUniqueInput!): User
  usersCount(where: UserWhereInput! = {}): Int
  addresses(
    where: AddressWhereInput! = {}
    orderBy: [AddressOrderByInput!]! = []
    take: Int
    skip: Int! = 0
  ): [Address!]
  address(where: AddressWhereUniqueInput!): Address
  addressesCount(where: AddressWhereInput! = {}): Int
  products(
    where: ProductWhereInput! = {}
    orderBy: [ProductOrderByInput!]! = []
    take: Int
    skip: Int! = 0
  ): [Product!]
  product(where: ProductWhereUniqueInput!): Product
  productsCount(where: ProductWhereInput! = {}): Int
  productCatagories(
    where: ProductCatagoryWhereInput! = {}
    orderBy: [ProductCatagoryOrderByInput!]! = []
    take: Int
    skip: Int! = 0
  ): [ProductCatagory!]
  productCatagory(where: ProductCatagoryWhereUniqueInput!): ProductCatagory
  productCatagoriesCount(where: ProductCatagoryWhereInput! = {}): Int
  productInventories(
    where: ProductInventoryWhereInput! = {}
    orderBy: [ProductInventoryOrderByInput!]! = []
    take: Int
    skip: Int! = 0
  ): [ProductInventory!]
  productInventory(where: ProductInventoryWhereUniqueInput!): ProductInventory
  productInventoriesCount(where: ProductInventoryWhereInput! = {}): Int
  productDiscounts(
    where: ProductDiscountWhereInput! = {}
    orderBy: [ProductDiscountOrderByInput!]! = []
    take: Int
    skip: Int! = 0
  ): [ProductDiscount!]
  productDiscount(where: ProductDiscountWhereUniqueInput!): ProductDiscount
  productDiscountsCount(where: ProductDiscountWhereInput! = {}): Int
  keystone: KeystoneMeta!
}

type KeystoneMeta {
  adminMeta: KeystoneAdminMeta!
}

type KeystoneAdminMeta {
  enableSignout: Boolean!
  enableSessionItem: Boolean!
  lists: [KeystoneAdminUIListMeta!]!
  list(key: String!): KeystoneAdminUIListMeta
}

type KeystoneAdminUIListMeta {
  key: String!
  itemQueryName: String!
  listQueryName: String!
  hideCreate: Boolean!
  hideDelete: Boolean!
  path: String!
  label: String!
  singular: String!
  plural: String!
  description: String
  initialColumns: [String!]!
  pageSize: Int!
  labelField: String!
  fields: [KeystoneAdminUIFieldMeta!]!
  initialSort: KeystoneAdminUISort
  isHidden: Boolean!
}

type KeystoneAdminUIFieldMeta {
  path: String!
  label: String!
  isOrderable: Boolean!
  isFilterable: Boolean!
  fieldMeta: JSON
  viewsIndex: Int!
  customViewsIndex: Int
  createView: KeystoneAdminUIFieldMetaCreateView!
  listView: KeystoneAdminUIFieldMetaListView!
  itemView(id: ID!): KeystoneAdminUIFieldMetaItemView
  search: QueryMode
}

type KeystoneAdminUIFieldMetaCreateView {
  fieldMode: KeystoneAdminUIFieldMetaCreateViewFieldMode!
}

enum KeystoneAdminUIFieldMetaCreateViewFieldMode {
  edit
  hidden
}

type KeystoneAdminUIFieldMetaListView {
  fieldMode: KeystoneAdminUIFieldMetaListViewFieldMode!
}

enum KeystoneAdminUIFieldMetaListViewFieldMode {
  read
  hidden
}

type KeystoneAdminUIFieldMetaItemView {
  fieldMode: KeystoneAdminUIFieldMetaItemViewFieldMode!
}

enum KeystoneAdminUIFieldMetaItemViewFieldMode {
  edit
  read
  hidden
}

type KeystoneAdminUISort {
  field: String!
  direction: KeystoneAdminUISortDirection!
}

enum KeystoneAdminUISortDirection {
  ASC
  DESC
}
